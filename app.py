import streamlit as st
import pickle
import faiss
import numpy as np
import openai
from typing import List, Dict, Any
import uuid
import pandas as pd
import os

# Page configuration
st.set_page_config(
    page_title="KazTransOil Knowledge Chatbot",
    page_icon="üõ¢Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Custom CSS for better styling
st.markdown("""
<style>
    .main > div {
        padding-top: 2rem;
    }
    .stButton > button {
        width: 100%;
        border-radius: 5px;
        height: 3em;
        background-color: #f0f2f6;
        border: 1px solid #e0e0e0;
    }
    .source-button {
        background-color: #e8f4fd;
        border: 1px solid #1f77b4;
        border-radius: 5px;
        padding: 10px;
        margin: 5px 0;
    }
    .chat-message {
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 1rem 0;
        border: 1px solid #e0e0e0;
    }
    .user-message {
        background-color: #f0f8ff;
        border-left: 4px solid #1f77b4;
    }
    .bot-message {
        background-color: #f8f9fa;
        border-left: 4px solid #28a745;
    }
</style>
""", unsafe_allow_html=True)

class RAGChatbot:
    def __init__(self):
        self.model = None
        self.index = None
        self.documents = None
        self.document_list = None
        
    @st.cache_resource
    def load_models(_self):
        """Load OpenAI client for embeddings"""
        try:
            # Get API key from environment or Streamlit secrets
            api_key = os.getenv('OPENAI_API_KEY') or st.secrets.get('OPENAI_API_KEY')
            if not api_key:
                st.error("OpenAI API key not found. Please set OPENAI_API_KEY environment variable or add it to Streamlit secrets.")
                return None
            
            client = openai.OpenAI(api_key=api_key)
            return client
        except Exception as e:
            st.error(f"Error loading OpenAI client: {e}")
            return None
    
    @st.cache_data
    def load_data(_self):
        """Load FAISS index and document metadata"""
        try:
            # Load FAISS index
            index = faiss.read_index("data/index_kaztransoil.faiss")
            
            # Load document mappings
            with open("data/mapping_kaztransoil.pkl", "rb") as f:
                documents = pickle.load(f)
            
            # Convert to list for easier indexing
            document_list = list(documents.values())
            
            return index, documents, document_list
        except Exception as e:
            st.error(f"Error loading data: {e}")
            return None, None, None
    
    def initialize(self):
        """Initialize the chatbot components"""
        self.model = self.load_models()
        self.index, self.documents, self.document_list = self.load_data()
        
        if not all([self.model, self.index, self.documents]):
            st.error("Failed to initialize chatbot components")
            return False
        return True
    
    def get_embedding(self, text: str) -> np.ndarray:
        """Get OpenAI embedding for text using text-embedding-3-large"""
        try:
            response = self.model.embeddings.create(
                input=text,
                model="text-embedding-3-large"
            )
            return np.array(response.data[0].embedding, dtype='float32')
        except Exception as e:
            st.error(f"Error getting embedding: {e}")
            return None
    
    def search_similar_documents(self, query: str, k: int = 5) -> List[Dict[str, Any]]:
        """Search for similar documents using FAISS with OpenAI embeddings"""
        if not self.model or not self.index:
            return []
        
        try:
            # Get OpenAI embedding for the query
            query_vector = self.get_embedding(query)
            if query_vector is None:
                return []
            
            # Reshape for FAISS search (needs 2D array)
            query_vector = query_vector.reshape(1, -1)
            
            # Search in FAISS index
            scores, indices = self.index.search(query_vector, k)
            
            # Retrieve corresponding documents
            results = []
            for i, (score, idx) in enumerate(zip(scores[0], indices[0])):
                if idx < len(self.document_list):
                    doc = self.document_list[idx]
                    results.append({
                        'document': doc,
                        'score': float(score),
                        'rank': i + 1
                    })
            
            return results
        except Exception as e:
            st.error(f"Error during search: {e}")
            return []
    
    def generate_answer(self, query: str, context_docs: List[Dict[str, Any]]) -> str:
        """Generate answer using retrieved context and OpenAI chat completion"""
        if not context_docs:
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞."
        
        try:
            # Build context from retrieved documents with metadata
            context_texts = []
            for i, doc in enumerate(context_docs[:3]):
                metadata = doc['document'].metadata
                source = metadata.get('document_source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')
                article = metadata.get('article', 'N/A')
                content = doc['document'].page_content
                
                context_text = f"–î–æ–∫—É–º–µ–Ω—Ç {i+1} (–ò—Å—Ç–æ—á–Ω–∏–∫: {source}, –†–∞–∑–¥–µ–ª: {article}):\n{content}"
                context_texts.append(context_text)
            
            context = "\n\n".join(context_texts)
            
            # Create system prompt and messages
            system_prompt = """–í—ã - –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–∞–∑–¢—Ä–∞–Ω—Å–û–π–ª, –∫—Ä—É–ø–Ω–µ–π—à–µ–π –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–≤–æ–¥–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω–µ. 
            –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –Ω–∞—Ö–æ–¥–∏—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏.

            –í –≤–∞—à–µ–º —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏–∏ –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:

            1. –°–¢ 6636-1901-–ê–û-039-2.009-2017 (–æ—Ç 09.10.2017)
            - –ú–µ—Ç–æ–¥–∏–∫–∞ –æ—Ü–µ–Ω–∫–∏ —Å—Ç–µ–ø–µ–Ω–∏ —Ä–∏—Å–∫–∞ –∞–≤–∞—Ä–∏–π –Ω–∞ –º–∞–≥–∏—Å—Ç—Ä–∞–ª—å–Ω—ã—Ö –Ω–µ—Ñ—Ç–µ–ø—Ä–æ–≤–æ–¥–∞—Ö
            - –í–∫–ª—é—á–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Ä–∏—Å–∫–æ–≤, –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ–Ω–Ω—É—é –∏ –±–∞–ª–ª—å–Ω—É—é –æ—Ü–µ–Ω–∫—É
            - –°–æ–¥–µ—Ä–∂–∏—Ç —Ä–∞—Å—á—ë—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª—ã, –º–æ–¥–µ–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∞–≤–∞—Ä–∏–π
            - –ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–Ω–∏–∂–µ–Ω–∏—é —Ä–∏—Å–∫–æ–≤
            
            2. –°–¢ 6636-1901-–ê–û-039-2.007-2018 (–æ—Ç 21.11.2018)
            - –ï–¥–∏–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –∏ –æ—Ö—Ä–∞–Ω–æ–π —Ç—Ä—É–¥–∞
            - –û–ø–∏—Å—ã–≤–∞–µ—Ç –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –≤ –æ–±–ª–∞—Å—Ç–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
            - –†–µ–≥–ª–∞–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å —Ä–∞–±–æ—Ç–Ω–∏–∫–æ–≤
            - –°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –æ—Ü–µ–Ω–∫–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∏—Å–∫–∞–º–∏
            - –í–∫–ª—é—á–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –æ–±—É—á–µ–Ω–∏—é –∏ –ø–æ—Ä—è–¥–æ–∫ —Ä–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –Ω–µ—Å—á–∞—Å—Ç–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤

            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã. –ü—Ä–∏ –æ—Ç–≤–µ—Ç–µ:
            1. –û—Ç–≤–µ—á–∞–π—Ç–µ —Ç–æ—á–Ω–æ –∏ –ø–æ —Å—É—â–µ—Å—Ç–≤—É, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            2. –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Ç–µ —ç—Ç–æ
            3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã–π —è–∑—ã–∫
            4. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
            5. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
            6. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —É–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

            –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–∞—Ö –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã—à–µ–ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö.
            
            –ï—Å–ª–∏ –≤—ã –Ω–µ —É–≤–µ—Ä–µ–Ω—ã –∏–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø—Ä–æ—Ç–∏–≤–æ—Ä–µ—á–∏–≤–∞, —É–∫–∞–∂–∏—Ç–µ —ç—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ."""
            
            messages = [
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": f"""–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞:
                
                {context}
                
                –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {query}
                
                –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤."""}
            ]
            
            # Get completion from OpenAI
            response = self.model.chat.completions.create(
                model="gpt-4o-mini",  # or another appropriate model
                messages=messages,
                temperature=0.7,
                max_tokens=1000,
                top_p=0.95,
                frequency_penalty=0,
                presence_penalty=0
            )
            
            return response.choices[0].message.content.strip()
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {str(e)}")
            return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä—É–π—Ç–µ –≤–æ–ø—Ä–æ—Å."

def main():
    st.title("üõ¢Ô∏è KazTransOil Knowledge Chatbot")
    st.markdown("### –£–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–∞–∑–¢—Ä–∞–Ω—Å–û–π–ª")
    
    # Initialize chatbot
    if 'chatbot' not in st.session_state:
        st.session_state.chatbot = RAGChatbot()
        if not st.session_state.chatbot.initialize():
            st.stop()
    
    # Initialize chat history
    if 'messages' not in st.session_state:
        st.session_state.messages = []
    
    if 'show_sources' not in st.session_state:
        st.session_state.show_sources = {}
    
    # Sidebar for settings
    with st.sidebar:
        st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        
        # OpenAI API Key input
        if not os.getenv('OPENAI_API_KEY') and not st.secrets.get('OPENAI_API_KEY'):
            st.subheader("üîë OpenAI API Key")
            api_key_input = st.text_input(
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à OpenAI API –∫–ª—é—á:", 
                type="password",
                help="–ö–ª—é—á –Ω—É–∂–µ–Ω –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (text-embedding-3-large)"
            )
            if api_key_input:
                os.environ['OPENAI_API_KEY'] = api_key_input
                st.success("‚úÖ API –∫–ª—é—á —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                st.rerun()
        else:
            st.success("‚úÖ OpenAI API –∫–ª—é—á –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        st.markdown("---")
        
        # Search parameters
        num_results = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞", 1, 10, 5)
        
        st.markdown("---")
        
        # Statistics
        if st.session_state.chatbot.document_list:
            st.metric("–í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", len(st.session_state.chatbot.document_list))
        
        st.markdown("---")
        
        # Clear chat button
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"):
            st.session_state.messages = []
            st.session_state.show_sources = {}
            st.rerun()
    
    # Chat interface
    st.markdown("### üí¨ –ß–∞—Ç")
    
    # Display chat messages
    for i, message in enumerate(st.session_state.messages):
        if message["role"] == "user":
            st.markdown(f"""
            <div class="chat-message user-message">
                <strong>–í—ã:</strong> {message["content"]}
            </div>
            """, unsafe_allow_html=True)
        else:
            st.markdown(f"""
            <div class="chat-message bot-message">
                <strong>–ü–æ–º–æ—â–Ω–∏–∫:</strong> {message["content"]}
            </div>
            """, unsafe_allow_html=True)
            
            # Show sources button
            if f"sources_{i}" in st.session_state.show_sources:
                sources = st.session_state.show_sources[f"sources_{i}"]
                
                col1, col2 = st.columns([1, 4])
                with col1:
                    show_sources = st.button(f"üìö –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", key=f"btn_sources_{i}")
                
                if show_sources or f"sources_visible_{i}" in st.session_state:
                    st.session_state[f"sources_visible_{i}"] = True
                    
                    if f"sources_visible_{i}" in st.session_state:
                        st.markdown("**üìã –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏:**")
                        
                        for j, source in enumerate(sources):
                            doc = source['document']
                            metadata = doc.metadata
                            
                            with st.expander(f"üìÑ –ò—Å—Ç–æ—á–Ω–∏–∫ {j+1}: {metadata.get('document_source', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫')[:50]}..."):
                                col1, col2 = st.columns([2, 1])
                                
                                with col1:
                                    st.write(f"**–î–æ–∫—É–º–µ–Ω—Ç:** {metadata.get('document_source', 'N/A')}")
                                    st.write(f"**–†–∞–∑–¥–µ–ª:** {metadata.get('article', 'N/A')}")
                                    st.write(f"**–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å:** {source['score']:.3f}")
                                
                                with col2:
                                    st.write(f"**–¢–æ–∫–µ–Ω–æ–≤:** {metadata.get('token_count', 'N/A')}")
                                    st.write(f"**–°–∏–º–≤–æ–ª–æ–≤:** {metadata.get('char_count', 'N/A')}")
                                
                                st.markdown("**–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ:**")
                                st.text_area("–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞", doc.page_content[:1000] + "..." if len(doc.page_content) > 1000 else doc.page_content, 
                                           height=150, key=f"content_{i}_{j}", label_visibility="hidden")
    
    # Chat input
    if query := st.chat_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ö–∞–∑–¢—Ä–∞–Ω—Å–û–π–ª..."):
        # Add user message
        st.session_state.messages.append({"role": "user", "content": query})
        
        # Process query
        with st.spinner("üîç –ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏..."):
            # Search for similar documents
            similar_docs = st.session_state.chatbot.search_similar_documents(query, num_results)
            
            if similar_docs:
                # Generate answer
                answer = st.session_state.chatbot.generate_answer(query, similar_docs)
                
                # Add assistant message
                st.session_state.messages.append({"role": "assistant", "content": answer})
                
                # Store sources for this message
                message_idx = len(st.session_state.messages) - 1
                st.session_state.show_sources[f"sources_{message_idx}"] = similar_docs
            else:
                st.session_state.messages.append({
                    "role": "assistant", 
                    "content": "–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å."
                })
        
        st.rerun()

    # Footer
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666; font-size: 0.8em;'>
        –†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ –¥–ª—è –ê–û ¬´–ö–∞–∑–¢—Ä–∞–Ω—Å–û–π–ª¬ª | –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è RAG —Å OpenAI Embeddings + FAISS
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main() 